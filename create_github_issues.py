#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GitHub Issues —á–µ—Ä–µ–∑ API.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ Epic B issues –≤ Project Backlog.
"""

import json
import requests
import os
from typing import Dict, List, Optional

class GitHubIssuesManager:
    def __init__(self, token: str, owner: str, repo: str):
        self.token = token
        self.owner = owner
        self.repo = repo
        self.base_url = f"https://api.github.com/repos/{owner}/{repo}"
        self.headers = {
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "dj-shorts-analyzer"
        }
    
    def create_issue(self, title: str, body: str, labels: List[str] = None, 
                     assignees: List[str] = None) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π issue"""
        data = {
            "title": title,
            "body": body,
            "labels": labels or [],
            "assignees": assignees or []
        }
        
        response = requests.post(
            f"{self.base_url}/issues",
            headers=self.headers,
            json=data
        )
        
        if response.status_code == 201:
            return response.json()
        else:
            raise Exception(f"Failed to create issue: {response.status_code} - {response.text}")
    
    def get_issues(self, state: str = "open") -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ issues"""
        response = requests.get(
            f"{self.base_url}/issues",
            headers=self.headers,
            params={"state": state}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Failed to get issues: {response.status_code} - {response.text}")
    
    def update_issue(self, issue_number: int, **kwargs) -> Dict:
        """–û–±–Ω–æ–≤–∏—Ç—å issue"""
        response = requests.patch(
            f"{self.base_url}/issues/{issue_number}",
            headers=self.headers,
            json=kwargs
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Failed to update issue: {response.status_code} - {response.text}")
    
    def add_issue_to_project(self, issue_number: int, project_id: int, 
                            column_id: int) -> Dict:
        """–î–æ–±–∞–≤–∏—Ç—å issue –≤ –ø—Ä–æ–µ–∫—Ç (—Ç—Ä–µ–±—É–µ—Ç GraphQL API)"""
        # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç GraphQL API –∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {"message": "Project integration requires GraphQL API implementation"}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Epic B issues"""
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("GITHUB_TOKEN")
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_TOKEN")
        print("   export GITHUB_TOKEN=your_github_token")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    owner = "TerryBerk"
    repo = "dj-shorts"
    
    manager = GitHubIssuesManager(token, owner, repo)
    
    # Epic B Issues –¥–∞–Ω–Ω—ã–µ
    epic_b_issues = [
        {
            "title": "[EPIC_B_BEAT_QUANT] B1 ‚Äî –õ–æ–∫–∞–ª—å–Ω—ã–π BPM –∏ —Å–µ—Ç–∫–∞ —É–¥–∞—Ä–æ–≤",
            "body": """–û—Ü–µ–Ω–∏—Ç—å BPM –∏ –±–∏—Ç—ã (`librosa.beat.beat_track`) –≤ –æ–∫–Ω–µ ¬±30‚Äì45s.

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏**
- –í–æ–∑–≤—Ä–∞—Ç –≤—Ä–µ–º—ë–Ω —É–¥–∞—Ä–æ–≤, BPM, confidence [0..1]
- –ù–∞ —Å–∏–Ω—Ç–µ—Ç–∏–∫–µ 4/4 –æ—à–∏–±–∫–∞ ‚â§100ms

**–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:** A6

**–°—Ç–∞—Ç—É—Å:** ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–æ–¥—É–ª—å `src/analyzer/beats.py` —Å –∫–ª–∞—Å—Å–∞–º–∏ `BeatTracker` –∏ `BeatQuantizer`
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å librosa –¥–ª—è beat tracking (`librosa.beat.beat_track`)
- –û—Ü–µ–Ω–∫–∞ BPM –∏ confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∏—Ç–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –±–∏—Ç–æ–≤ –¥–ª—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏
- –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: `librosa>=0.10.0`, `soundfile>=0.12.0`
- –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ unit-—Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤""",
            "labels": ["area:analyzer", "type:feature", "epic:beat-quantization", "status:completed"]
        },
        {
            "title": "[EPIC_B_BEAT_QUANT] B2 ‚Äî –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏ –¥–ª–∏–Ω—ã –∫–ª–∏–ø–∞",
            "body": """–°—Ç–∞—Ä—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —É–¥–∞—Ä/–±–∞—Ä **–ø–µ—Ä–µ–¥** `t_start`; –¥–ª–∏–Ω–∞ = `N*bar` (N‚àà{8,12,16}).

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏**
- `aligned=true` –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏
- –§–æ–ª–ª–±–µ–∫ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

**–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:** B1

**–°—Ç–∞—Ç—É—Å:** ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û
- –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –∫–ª–∏–ø–∞ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –±–∏—Ç—É –ø–µ—Ä–µ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
- –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º –±–∞—Ä–æ–≤ (2, 4, 6, 8, 12, 16 –±–∞—Ä–æ–≤)
- –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏ —Å fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π pipeline –∞–Ω–∞–ª–∏–∑–∞
- –†–µ–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å —É—Å–ø–µ—à–Ω–æ–π –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö 6 –∫–ª–∏–ø–æ–≤""",
            "labels": ["area:analyzer", "type:feature", "epic:beat-quantization", "status:completed"]
        }
    ]
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Epic B issues –≤ GitHub...")
    
    try:
        for issue_data in epic_b_issues:
            print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ issue: {issue_data['title']}")
            
            issue = manager.create_issue(
                title=issue_data["title"],
                body=issue_data["body"],
                labels=issue_data["labels"]
            )
            
            print(f"‚úÖ Issue —Å–æ–∑–¥–∞–Ω: #{issue['number']} - {issue['title']}")
            print(f"üîó URL: {issue['html_url']}")
            print()
        
        print("üéâ –í—Å–µ Epic B issues —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ GitHub Project Backlog")
        print("2. –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ issues –∏–∑ 'No Status' –≤ 'ToDo'")
        print("3. –ü—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–∂–¥—ã–º issue —Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ 'In Progress'")
        print("4. –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–≤—å—Ç–µ –≤ 'Done'")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ issues: {e}")

if __name__ == "__main__":
    main()